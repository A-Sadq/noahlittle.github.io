#!/usr/bin/env ruby
###########################################################################
###########################################################################
##  Copyright The Resistance (C) 1995-2011                               ##
##  Author: blass                                                        ##
##  blass[at]sdf.lonestar.org @ twitter.com/Blass_o_rama                 ##
##  Badass 1.0                                                           ##
##  This file is part of Badass.                                         ##
##  Badass is free software: you can redistribute it and/or modify       ##
##  it under the terms of the GNU General Public License as published by ##
##  the Free Software Foundation, either version 3 of the License, or    ##
##  (at your option) any later version.                                  ##
##  Badass is distributed in the hope that it will be useful,            ##
##  but WITHOUT ANY WARRANTY; without even the implied warranty of       ##
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        ##
##  GNU General Public License for more details.                         ##
##  You should have received a copy of the GNU General Public License    ##
##  along with Badass. If not, see http://www.gnu.org/licenses/          ##
###########################################################################
###########################################################################
## This script was based on pentbox 1.4 and re-written by blass          ##
###########################################################################
###########################################################################
$text_color = true
dir = File.dirname(__FILE__)
require dir + "/lib/pb_proced_lib.rb"

module Network_pb
  class DNS_search_pb
    def initialize()
      

      
      require File.dirname(__FILE__) + "/lib/net/dns/resolver.rb"
      require File.dirname(__FILE__) + "/lib/net/shodan/shodan.rb"
      require "timeout"
      
      wordlist = File.dirname(__FILE__) + "/../cryptography/other/hosts.txt"
      shodan_api_key = "1V95wJZnxcdos0mxObLqEjuReAVw1Zh7" # Badass SHODAN Developer API Key.
      dns_server = "8.8.8.8" # Google DNS server by default.
      max_threads = 15 # Maximum number of simultaneous threads.
      puts ""
      title " DNS and host gathering "
      puts ""
      warning " Insert domain to scan\n"
      puts ""
      warning "  Your Choice: "
      domain = gets.chomp.gsub("www.", "")
      
      def brutepetition(line, domain, resolv)
	Thread.new do
          continue = false
          while continue == false # This improves the performance, restart idle threads after 3s.
            begin
              Timeout::timeout(3) do
                puts resolv.query("#{line}.#{domain}", Net::DNS::A).answer
                continue = true
              end
            rescue Timeout::Error
            end
          end
	end
      end
      
      def ptrpetition(ip, resolv, forshodan = false)
	if forshodan == false
          Thread.new do
            continue = false
            while continue == false
              begin
                Timeout::timeout(3) do
                  puts resolv.query(ip, Net::DNS::PTR).answer
                  continue = true
                end
              rescue Timeout::Error
              end
            end
          end
	else
          continue = false
          while continue == false
            begin
              Timeout::timeout(2) do
                return resolv.query(ip, Net::DNS::PTR).answer
                continue = true
              end
            rescue Timeout::Error
            end
          end
	end
      end
      
      begin
	resolv = Net::DNS::Resolver.new(:nameservers => dns_server)
	resolv.udp_timeout = 0
	resolv.retry_number = 5
	resolv.retry_interval = 1
	warning "\n Using DNS Server: " + dns_server
	warning "\n [!] Searching DNS NS..."
	puts resolv.query(domain, Net::DNS::NS).answer
	warning "\n [!] Searching DNS MX..."
	puts resolv.query(domain, Net::DNS::MX).answer
	warning "\n [!] Searching with SHODAN..."
	begin
          api = Shodan::WebAPI.new(shodan_api_key)
          query = domain
          result = api.search(query)
          result['matches'].each do |host|
            print "IP #{host['ip']} #{host['country']} #{host['os']} = "
            result = ptrpetition(host['ip'], resolv, true)
            if result.size == 0
              warning " DNS not found\n"
            else
              puts result
            end
          end
	rescue
          warning " Error searching with SHODAN...\n"
	end
        
	warning "\n [!] Searching DNS by bruteforcing..."
	warning "\n Threads: " + max_threads.to_s
	warning "\n Wordlist: " + wordlist
	puts "----"
	begin
          list = File.open(wordlist, "r")
	rescue
          warning "\n Error opening #{wordlist}"
          puts ""
          exit
	end
	while line = list.gets
          line = line.chomp
          newthreads = false
          while newthreads == false
            if Thread.list.length < max_threads + 1 # The "+1" is the main thread.
              brutepetition(line, domain, resolv)
              newthreads = true
            else
              newthreads = false
              sleep(0.2)
            end
          end
	end
	list.close
	while Thread.list.length != 1
          warning " [!] Waiting for #{(Thread.list.length - 1).to_s} threads to finish...\n"
          sleep(5)
	end
        
	puts "\n Next step is reverse DNS [PTR] to all /24 IP range of main domain\n"
	warning " Press enter to continue...\n"
	warning " This can cause a lot of false positives...\n"
	gets
	begin
          main_ip = resolv.query(domain, Net::DNS::A).answer[0].to_s.split(" ")[4].split(".") # Array with IP octets.
	rescue
          begin
            main_ip = resolv.query("www.#{domain}", Net::DNS::A).answer[0].to_s.split(" ")[4].split(".")
          rescue
            warning " Error resolving IP for #{domain}\n"
            exit
          end
	end
	loop do
          warning " [!] Reversing DNS [PTR] range #{main_ip[0]}.#{main_ip[1]}.#{main_ip[2]}.0-255"
          for i in 0..255 do
            ip = "#{main_ip[0]}.#{main_ip[1]}.#{main_ip[2]}.#{i.to_s}"
            newthreads = false
            while newthreads == false
              if Thread.list.length < max_threads + 1 # The "+1" is the main thread.
                ptrpetition(ip, resolv)
                newthreads = true
              else
                newthreads = false
                sleep(0.2)
              end
            end
          end
          while Thread.list.length != 1
            sleep(5)
            warning " [!] Waiting for #{(Thread.list.length - 1).to_s} threads to finish...\n"
          end
          warning "\n Continue? Press enter to continue..."
          goback = gets.chomp
          if goback != "back" # You can increase or decrease the range.
            if main_ip[2] == "255"
              main_ip[2] = "0"
              if main_ip[1] == "255"
                main_ip[1] = "0"
                if main_ip[0] == "255"
                  warning "\n Error: It was the last one..."
                  puts ""
                  exit
                else
                  main_ip[0] = "#{main_ip[0].to_i + 1}"
                end
              else
                main_ip[1] = "#{main_ip[1].to_i + 1}"
              end
            else
              main_ip[2] = "#{main_ip[2].to_i + 1}"
            end
          else
            if main_ip[2] == "0"
              main_ip[2] = "255"
              if main_ip[1] == "0"
                main_ip[1] = "255"
                if main_ip[0] == "0"
                  warning "\n Error: It was the first one..."
                  puts ""
                  exit
                else
                  main_ip[0] = "#{main_ip[0].to_i - 1}"
                end
              else
                main_ip[1] = "#{main_ip[1].to_i - 1}"
              end
            else
              main_ip[2] = "#{main_ip[2].to_i - 1}"
            end
          end
	end
      end
    end
  end
end
