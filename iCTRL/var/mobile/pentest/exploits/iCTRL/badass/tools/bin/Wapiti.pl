#!/usr/bin/perl -w
###########################################################################
###########################################################################
##  Copyright The Resistance (C) 1995-2011                               ##
##  Author: blass                                                        ##
##  blass[at]sdf.lonestar.org @ twitter.com/Blass_o_rama                 ##
##  Badass 1.0                                                           ##
##  This file is part of Badass.                                         ##
##  Badass is free software: you can redistribute it and/or modify       ##
##  it under the terms of the GNU General Public License as published by ##
##  the Free Software Foundation, either version 3 of the License, or    ##
##  (at your option) any later version.                                  ##
##  Badass is distributed in the hope that it will be useful,            ##
##  but WITHOUT ANY WARRANTY; without even the implied warranty of       ##
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        ##
##  GNU General Public License for more details.                         ##
##  You should have received a copy of the GNU General Public License    ##
##  along with Badass. If not, see http://www.gnu.org/licenses/          ##
###########################################################################
###########################################################################

use Term::ANSIColor;
use strict;
use warnings;

use Term::ANSIColor; print color("red"), " Wapiti.pl Created by blass for badass 0.2.2 Beta\n", color("reset");
print " You need Wapiti installed on your system to run this feature.\n See http://wapiti.sourceforge.net/ for download page.";

my @program;
my @A;
my @B;
my @C;
my $url;
my $scan;
my $proxy;


print " \n Choose your options for Scanning. \n You must run badass as root:\n\n (A) Wapiti GET_ALL: only use GET request  \n (B) Wapiti GET_XSS: only XSS attacks with HTTP GET method  \n (C) Wapiti POST_XSS: only XSS attacks with HTTP POST method  \n ";

print "\n  Your Choice\n\n    --> ";
$scan=<STDIN>;
chomp($scan);



if ($scan eq "A" or $scan eq "B" or $scan eq "C" ) {
    print "\n  Enter Proxy in this format (http://127.0.0.1:80): ";
    $proxy=<STDIN>;
    chomp($proxy);
}

if ($scan eq "A" or $scan eq "B" or $scan eq "C" ) {
    print "\n  Enter Url: ";
    $url=<STDIN>;
    chomp($url);
    print " \n";
use Term::ANSIColor; print color("red"), "  This may take several minutes...", color("reset");   
print " \n"
}



if ($scan eq "A") {
@A = `wapiti $url -p $proxy -u -v 2 -m GET_ALL`;
    print "@A\n";
}

if ($scan eq "B") {
@B = `wapiti $url -p $proxy -u -v 2 -m GET_XSS`;
    print "B\n";
}

if ($scan eq "C") {
@C = `wapiti $url -p $proxy -u -v 2 -m POST_XSS`;
    print "@C\n";
}

else {
use Term::ANSIColor; print color("red"), " badass!\n", color("reset");
}
