#!/usr/bin/env ruby
###########################################################################
###########################################################################
##  Copyright The Resistance (C) 1995-2011                               ##
##  Author: blass                                                        ##
##  blass[at]sdf.lonestar.org @ twitter.com/Blass_o_rama                 ##
##  Badass 1.0                                                           ##
##  This file is part of Badass.                                         ##
##  Badass is free software: you can redistribute it and/or modify       ##
##  it under the terms of the GNU General Public License as published by ##
##  the Free Software Foundation, either version 3 of the License, or    ##
##  (at your option) any later version.                                  ##
##  Badass is distributed in the hope that it will be useful,            ##
##  but WITHOUT ANY WARRANTY; without even the implied warranty of       ##
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        ##
##  GNU General Public License for more details.                         ##
##  You should have received a copy of the GNU General Public License    ##
##  along with Badass. If not, see http://www.gnu.org/licenses/          ##
###########################################################################
###########################################################################
## This script was based on pentbox 1.4 and re-written by blass          ##
###########################################################################
###########################################################################
$text_color = true

module Cryptogr_pb
  class Hash_cracker_pb
    def initialize()

      
      require "digest/md5"
      require "digest/sha1"
      require "digest/sha2"
      require "digest/rmd160"
      system ("clear")      
      puts ""
      title " Hash Password Cracker "
      puts ""
      warning " Insert hash to crack"
      puts ""
      puts ""
      warning "  Your Choice: "
      hash = gets.chomp.downcase
      system ("clear") 
      puts ""
      puts ""
      title "    -==Type of hash==- "
      title "                       "
      title " 1- MD5                "
      title "                       "
      title " 2- SHA1               "
      title "                       "
      title " 3- SHA256             "
      title "                       "
      title " 4- SHA384             "
      title "                       "
      title " 5- SHA512             "
      title "                       "
      title " 6- RIPEMD-160         "
      title "                       "
      puts ""
      warning "  Your Choice: "
      type = gets.chomp
      system ("clear") 
      puts ""
      puts ""
      title "    -==Select method to crack==- "
      title "                                 "
      title " 1- Numbers bruteforce           "
      title "                                 "
      title " 2- Dictionary attack            "
      title "                                 "
      title " 3- Dictionary hybrid (slower)   "
      title "                                 "
      puts ""
      warning "  Your Choice: "
      how = gets.chomp
      system ("clear") 
      if how == "2" || how == "3"
	puts ""
	warning " Insert dictionary file to use\n"
	puts ""
	warning " Default: badass/tools/bin/cryptography/other/badass-list.txt\n"
        puts ""
	puts ""
	warning "  Your Choice: "
	dicf = gets.chomp.gsub("\"", "").gsub("'", "")
        system ("clear") 
	if dicf == ""
          dicf = "#{File.dirname(__FILE__)}/other/badass-list.txt"
	end
	begin
          $dict = File.open(dicf, "r")
	rescue
          puts ""
          warning " Error opening dictionary #{dicf}\n"
          puts ""
          exit
	end
      end
      
      puts ""
      
      def cracknum(algorit, hash)
	warning " [!] In Progress..."
	$cracked = false
	Thread.new do # One thread to compare possibilities.
          $num = 0
          while hash != algorit.hexdigest($num.to_s)
            $num += 1
          end
          $cracked = true
	end
	while $cracked == false # And the principal thread to show the status.
          STDOUT.flush
          warning "\n\n\r [!] Trying...: #{$num.to_s}"
          sleep(0.1)
	end
	puts ""
	puts ""
	warning " [!] Cracked password = #{$num.to_s}\n\n"
	puts ""
      end
      
      def crackdic(algorit, hash)
	warning " [!] In Progress..."
	$cracked = "?"
	thread = Thread.new do # One thread to read the dictionary and compare possibilities.
          while $word = $dict.gets
            begin
              if hash == algorit.hexdigest($word.chomp)
                $cracked = "y"
                thread.kill
              end
            rescue
            end
          end
          $cracked = "n"
	end
	while $cracked == "?" # And the principal thread to show the status.
          STDOUT.flush
          begin
            warning "\r [!] Trying #{$word.chomp}" + " "*15
          rescue
          end
          sleep(0.1)
	end
	puts ""
	if $cracked == "y"
          puts ""
          warning " [!] Cracked password = #{$word}\n\n"
          puts ""
	else
          puts ""
          warning " [!] Dictionary finished, password not found...\n\n"
          puts ""
	end
      end
      
      def crackdichyb(algorit, hash)
	warning " [!] In Progress..."
	$cracked = "?"
	$thread = Thread.new do # One thread to read the dictionary, modify words and compare possibilities.
          while $word = $dict.gets
            begin
              $wordcomp = $word.chomp
            rescue
            end
            Thread.new do # New thread to improve performance in this comparisons.
              if hash == algorit.hexdigest($wordcomp)
                $password = $wordcomp
                $cracked = "y"
                $thread.kill
              end
            end
            if hash == algorit.hexdigest($wordcomp.upcase)
              $password = $wordcomp.upcase
              $cracked = "y"
              $thread.kill
            end
            if hash == algorit.hexdigest($wordcomp.downcase)
              $password = $wordcomp.downcase
              $cracked = "y"
              $thread.kill
            end
            brutecont_t = 0
            Thread.new do # New thread to improve performance in this comparaisons.
              100.times do
                begin
                  if hash == algorit.hexdigest("#{$word.chomp}#{brutecont_t.to_s}")
                    $password = "#{$word.chomp}#{brutecont_t.to_s}"
                    $cracked = "y"
                    $thread.kill
                  end
                rescue
                end
                brutecont_t += 1
              end
            end
            brutecont = 0
            100.times do
              if hash == algorit.hexdigest("#{$wordcomp}#{brutecont.to_s}".upcase)
                $password = "#{$wordcomp}#{brutecont.to_s}".upcase
                $cracked = "y"
                $thread.kill
              end
              brutecont += 1
            end
            brutecont = 0
            100.times do
              if hash == algorit.hexdigest("#{$wordcomp}#{brutecont.to_s}".downcase)
                $password = "#{$wordcomp}#{brutecont.to_s}".downcase
                $cracked = "y"
                $thread.kill
              end
              brutecont += 1
            end
          end
          $cracked = "n"
	end
	while $cracked == "?" # And the principal thread to show the status.
          STDOUT.flush
          warning "\r [!] Trying #{$wordcomp}" + " "*15
          sleep(0.1)
	end
	puts ""
	if $cracked == "y"
          puts ""
          warning " [!] Cracked password = #{$password}\n\n"
          puts ""
	else
          puts ""
          warning " [!] Dictionary finished, password not found...\n\n"
          puts ""
	end
      end
      
      case type
      when "1"
        case how
        when "1"
          cracknum(Digest::MD5, hash)
        when "2"
          crackdic(Digest::MD5, hash)
        when "3"
          crackdichyb(Digest::MD5, hash)
        else
          puts ""
          warning " Invalid method...\n\n"
          system ("clear")
          puts ""
        end
      when "2"
        case how
        when "1"
          cracknum(Digest::SHA1, hash)
        when "2"
          crackdic(Digest::SHA1, hash)
        when "3"
          crackdichyb(Digest::SHA1, hash)
        else
          puts ""
          warning " Invalid method...\n\n"
          puts ""
        end
      when "3"
        case how
        when "1"
          cracknum(Digest::SHA256, hash)
        when "2"
          crackdic(Digest::SHA256, hash)
        when "3"
          crackdichyb(Digest::SHA256, hash)
        else
          puts ""
          warning " Invalid method...\n\n"
          system ("clear")
          puts ""
        end
      when "4"
        case how
        when "1"
          cracknum(Digest::SHA384, hash)
        when "2"
          crackdic(Digest::SHA384, hash)
        when "3"
          crackdichyb(Digest::SHA384, hash)
        else
          puts ""
          warning " Invalid method...\n\n"
          system ("clear")
          puts ""
        end
      when "5"
        case how
        when "1"
          cracknum(Digest::SHA512, hash)
        when "2"
          crackdic(Digest::SHA512, hash)
        when "3"
          crackdichyb(Digest::SHA512, hash)
        else
          puts ""
          warning " Invalid method...\n\n"
          system ("clear")
          puts ""
        end
      when "6"
        case how
        when "1"
          cracknum(Digest::RMD160, hash)
        when "2"
          crackdic(Digest::RMD160, hash)
        when "3"
          crackdichyb(Digest::RMD160, hash)
        else
          puts ""
          system ("clear")
          puts ""
        end
      else
        puts ""
        system ("clear")
        puts ""
        
      end
    end
  end
end
